module(load="impstats" log.syslog="on" ruleset="from_pstats" format="json" resetCounters="on" interval="10")
module(load="imjournal" PersistStateInterval="100" Ratelimit.Interval="60" Ratelimit.Burst="20000" StateFile="/var/spool/rsyslog/imjournal.state")
module(load="imfile" mode="inotify")
module(load="imuxsock" SysSock.RateLimit.Interval="0" SysSock.IgnoreTimestamp="off")
module(load="omrelp")
module(load="omstdout")
module(load="mmjsonparse")
module(load="imtcp")

#TODO: work around permission issue when journal has different UID
#$PrivDropToUser syslog
#$PrivDropToGroup syslog

$localHostname {{ getv "/self/host/name" }}

$MaxMessageSize 32k
$WorkDirectory /var/spool/rsyslog

# Log lines templates
template(name="CEETemplate" type="string" string="<%PRI%>%TIMESTAMP:::date-rfc3339% %HOSTNAME% %!syslogtag% @cee: %$!all-json-plain%")

# timestamp templates
template(name="timestampRFC3339" type="string" string="%timestamp:::date-rfc3339%")

# StatsD protocol templates
template(name="StatsDkernelOOM" type="string" string="syslog.kernel.%HOSTNAME%.oom:1|c\n")
template(name="StatsDkernelKill" type="string" string="syslog.kernel.%HOSTNAME%.kill:1|c\n")
template(name="StatsDkernelOops" type="string" string="syslog.kernel.%HOSTNAME%.oops:1|c\n")
template(name="StatsDkernelSegfault" type="string" string="syslog.kernel.%HOSTNAME%.segfault:1|c\n")
template(name="StatsDQueue" type="list") {
         constant(value="log_agent_{{ getv "/self/container/service_index" }}.queue.")
         property(name="$!name")
         constant(value=".size:")
             property(name="$!size")
             constant(value="|g\n")
         constant(value="log_agent_{{ getv "/self/container/service_index" }}.queue.")
         property(name="$!name")
         constant(value=".enqueued:")
             property(name="$!enqueued")
             constant(value="|c\n")
         constant(value="log_agent_{{ getv "/self/container/service_index" }}.queue.")
         property(name="$!name")
         constant(value=".discarded_full:")
             property(name="$!discarded.full")
             constant(value="|c\n")
         constant(value="log_agent_{{ getv "/self/container/service_index" }}.queue.")
         property(name="$!name")
         constant(value=".discarded_nf:")
             property(name="$!discarded.nf")
             constant(value="|c\n")
         constant(value="log_agent_{{ getv "/self/container/service_index" }}.queue.")
         property(name="$!name")
         constant(value=".maxqsize:")
             property(name="$!maxqsize")
             constant(value="|g\n")
        }

template(name="StatsDImJournal" type="list") {
         constant(value="log_agent_{{ getv "/self/container/service_index" }}.imjournal.submitted:")
             property(name="$!submitted")
             constant(value="|c\n")
         constant(value="log_agent_{{ getv "/self/container/service_index" }}.imjournal.read:")
             property(name="$!read")
             constant(value="|c\n")
         constant(value="log_agent_{{ getv "/self/container/service_index" }}.imjournal.discarded:")
             property(name="$!discarded")
             constant(value="|c\n")
         constant(value="log_agent_{{ getv "/self/container/service_index" }}.imjournal.failed:")
             property(name="$!failed")
             constant(value="|c\n")
         constant(value="log_agent_{{ getv "/self/container/service_index" }}.imjournal.poll_failed:")
             property(name="$!poll_failed")
             constant(value="|c\n")
         constant(value="log_agent_{{ getv "/self/container/service_index" }}.imjournal.rotations:")
             property(name="$!rotations")
             constant(value="|c\n")
         constant(value="log_agent_{{ getv "/self/container/service_index" }}.imjournal.recovery_attempts:")
             property(name="$!recovery_attempts")
             constant(value="|c\n")
         constant(value="log_agent_{{ getv "/self/container/service_index" }}.imjournal.ratelimit_discarded_in_interval:")
             property(name="$!ratelimit_discarded_in_interval")
             constant(value="|c\n")
         constant(value="log_agent_{{ getv "/self/container/service_index" }}.imjournal.disk_usage_bytes:")
             property(name="$!disk_usage_bytes")
             constant(value="|g\n")
        }

input(type="imfile" File="/hostfs/var/log/dpkg.log" Tag="dpkg:" PersistStateInterval="100" Ruleset="jsonize" freshStartTail="on")
input(type="imfile" File="/hostfs/var/log/apt/history.log" Tag="apt:" PersistStateInterval="100" Ruleset="jsonize" freshStartTail="on")
input(type="imuxsock" Socket="/logging_agent/dev/log" Ruleset="jsonize" CreatePath="on")
input(type="imtcp" port="9514" Ruleset="devnull")

ruleset(
  name="jsonize"
  queue.type="LinkedList"
) {
  set $!MESSAGE = $msg;
  set $!hostname = $hostname;
  set $!inputname = $inputname;
  set $!pri = $pri;
  set $!programname = $programname;
  set $!rawmsg = $rawmsg;
  set $!syslogfacility = $syslogfacility;
  set $!syslogseverity = $syslogseverity;
  set $!syslogtag = $syslogtag;
  set $!timegenerated = exec_template("timestampRFC3339");

  call forward
}

ruleset(
  name="from_internal"
  queue.type="LinkedList"
) {
  action(type="omstdout" name="internal_stdout")
}

ruleset(
  name="forward"
  queue.type="LinkedList"
) {

  if ($!CONTAINER_TAG != "") then {
    unset $!SYSLOG_IDENTIFIER;
    set $!syslogtag = "containers:";
  } else {
    set $!syslogtag = $syslogtag;
  }

{{- if ne "" (getenv "DEBUG") }}
  action(type="omfile"
         file="/tmp/debug.log"
         template="RSYSLOG_DebugFormat"
         dirCreateMode="0755"
         FileCreateMode="0644"
  )
{{- end }}

  action(type="omrelp"
         name="fwd_to_logserver"
         target="syslog.logging.rancher.internal"
         port="2514"
         template="CEETemplate"
         queue.type="LinkedList"
         queue.filename="fwd_queue"
         action.resumeretrycount="-1"
         queue.dequeuebatchsize="100"
         queue.saveonshutdown="on"
         queue.discardseverity="8"
         queue.timeoutenqueue="0"
         queue.maxdiskspace="1g"
         queue.highwatermark="4000"
         queue.lowwatermark="1000"
         queue.size="5000"
         queue.discardmark="4875"
         tls="off"
         rebindinterval="10000"
  )

  if ($!SYSLOG_IDENTIFIER == "kernel") then {
    if ($!MESSAGE contains "Out of memory") then {
      action(type="omfwd"
             name="fwd_imudp_stats"
             target="statsd.metrics.rancher.internal"
             protocol="udp"
             port="8125"
             template="StatsDkernelOOM"
      )
    } else if ($!MESSAGE contains "Killed process") then {
      action(type="omfwd"
             name="fwd_imudp_stats"
             target="statsd.metrics.rancher.internal"
             protocol="udp"
             port="8125"
             template="StatsDkernelKill"
      )
    } else if ($!MESSAGE contains "Call Trace") then {
      action(type="omfwd"
             name="fwd_imudp_stats"
             target="statsd.metrics.rancher.internal"
             protocol="udp"
             port="8125"
             template="StatsDkernelOops"
      )
    } else if ($!MESSAGE contains "segfault") then {
      action(type="omfwd"
             name="fwd_imudp_stats"
             target="statsd.metrics.rancher.internal"
             protocol="udp"
             port="8125"
             template="StatsDkernelSegfault"
      )
    }
  }
}

ruleset(
  name="from_pstats"
  queue.type="LinkedList"
) {
  action(type="mmjsonparse" cookie="" name="parse_json_from_pstats")

  if ($!origin == "core.queue") then {
    action(type="omfwd"
           name="fwd_queue_stats"
           target="statsd.metrics.rancher.internal"
           protocol="udp"
           port="8125"
           template="StatsDQueue"
    )
  } else if ($!origin == "imjournal" and $!submitted != "") then {
    action(type="omfwd"
           name="fwd_imjournal_stats"
           target="statsd.metrics.rancher.internal"
           protocol="udp"
           port="8125"
           template="StatsDImJournal"
    )
  }

{{- if ne "" (getenv "DEBUG") }}
  action(type="omfile"
         name="pstats_dyn_file"
         file="/tmp/pstats.log"
         dirCreateMode="0755"
         FileCreateMode="0644"
         template="RSYSLOG_DebugFormat"
  )
{{- end }}
}

ruleset(
  name="devnull"
  queue.type="LinkedList"
) {
  stop
}

if ($inputname == "rsyslogd") then {
  call from_internal
}

call forward
